-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[st, w], expr) {
  case expr of
    Var     (name)                      -> [c, st.lookup (name)]
  | Ref     (name)                      -> [c, Ref (name)]
  | Const   (n)                         -> [c, n]
  | Skip                                -> [c, Bot]
  | Ignore  (expr)                      -> 
    case evalList (c, {expr}) of
      [c, _] -> [c, Bot]
    esac
  | Seq     (exp1, exp2)                -> 
    case evalList (c, {exp1, exp2}) of
      [c, {_, ev_2}] -> [c, ev_2]
    esac
  | Binop   (op, l, r)                  -> 
    case evalList (c, {l, r}) of
      [c, {ev_l, ev_r}] -> [c, evalOp (op, ev_l, ev_r)]
    esac
  | Assn    (ref, rhs)                  ->
    case evalList (c, {ref, rhs}) of
      [[st1, w1], {Ref (name), ev_rhs}] -> [[st1 <- [name, ev_rhs], w1], ev_rhs]
    esac
  | Read    (ref)                       ->
    case eval (c, ref) of
      [[st1, w1], Ref (name)] -> 
        case readWorld (w1) of
          [v, w2] -> [[st1 <- [name, v], w2], Bot]
        esac
    esac
  | Write   (expr)                      -> 
    case eval (c, expr) of
      [[st1, w1], v] -> [[st1, writeWorld (v, w1)], Bot]
    esac
  | If      (cond, then_exp, else_exp)  ->
    case eval (c, cond) of
      [c1, v] -> if v != 0 then
        eval (c1, then_exp)
      else
        eval (c1, else_exp)
      fi
    esac
  | While   (cond, body)                -> (
      var ev = [c, Bot];
      while (ev := eval (ev.fst, cond)).snd != 0 do
        ev := eval (ev.fst, body)
      od;
      [ev.fst, Bot]
    )
  | DoWhile (body, cond)                -> (
      var ev = [c, Bot];
      do
        ev := eval (ev.fst, body)
      while (ev := eval (ev.fst, cond)).snd != 0 od;
      [ev.fst, Bot]
    )
  | Scope (defs, expr)                  -> (
      fun addDef(st, def) {
        case def of
          Fun (name, args, body)  -> st.addFunction(name, args, body)
        | Var (names)             -> st.addNames(names)
        esac
      }
      var st1 = foldl(addDef, st.enterScope, defs);
      case eval ([st1, w], expr) of
        [[st2, w2], v] -> [[st2.leaveScope, w2], v]
      esac
    )

  | Call (name, args)                     -> (
      -- st.checkFun(name);
      case evalList(c, args) of
        [[st, w], valueParams] -> 
          case st.lookup (name) of
            Fun(argNames, body) -> (
              fun addArg(st, [argName, valueParam]) {
                st.addName(argName, valueParam)
              }
              var st1 = foldl(addArg, st.enterFunction, zip(argNames, valueParams));
              case eval ([st1, w], body) of
                [[st2, w2], retVal] -> [[st.leaveFunction(st2.getGlobal), w2], retVal]
              esac
            )
          esac
      esac
    )
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}