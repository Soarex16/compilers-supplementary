-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(op) {
  [
    s(op),
    fun (l, _, r) {
      Binop(op, l, r)
    }
  ]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (
        {
          [Left, binOp.map({"!!"})],
          [Left, binOp.map({"&&"})],
          [Nona, binOp.map({ "==", "!=", "<=", "<", ">=", ">"})],
          [Left, binOp.map({"+", "-"})],
          [Left, binOp.map({"/", "*", "%"})]
        },
        primary
      ));

var stmt = memo $ eta syntax (
  var_name=lident s[":="] expr=exp { Assn(var_name, expr) }       |
  l=stmt s[";"] r=stmt end { Seq(l, r) }                          |
  kSkip { Skip }                                                  |
  kRead var_name=inbr[s("("), lident, s(")")] { Read(var_name) }  |
  kWrite expr=inbr[s("("), exp, s(")")] { Write(expr) }
);
   

-- Public top-level parser
public parse = stmt;
             
