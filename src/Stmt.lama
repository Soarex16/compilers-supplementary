-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Skip                 -> c
  | Seq   (stmt1, stmt2) -> (
      var c1 = eval(c, stmt1);
      eval(c1, stmt2)
    )
  | Assn  (name, expr) -> (
      var st = c.fst;
      var w = c.snd;
      var evaluatedExpr = evalExpr(st, expr);
      var st1 = st <- [name, evaluatedExpr];
      [st1, w]
    )
  | Read  (name) -> (
      var st = c.fst;
      var w = c.snd;
      var readRes = readWorld(w);
      var st1 = st <- [name, readRes.fst];
      [st1, readRes.snd]
    )
  | Write (expr) -> (
      var st = c.fst;
      var w = c.snd;
      var evaluatedExpr = evalExpr(st, expr);
      var w1 = writeWorld(evaluatedExpr, w);
      [st, w1]
    )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
