-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> case c of
      Z   -> sprintf ("CJMP Z, %s", l)
    | NZ  -> sprintf ("CJMP NZ, %s", l)
    esac
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  fun evalInsn([stack, state, world], i) {
    -- printf("evaluating insn: %s\n", sehowSMInsn (i));
    case i of
      READ      -> (
        var readRes = readWorld(world);
        [readRes.fst : stack, state, readRes.snd]
      )
    | WRITE     -> case stack of
        value : s1 -> [s1, state, writeWorld(value, world)]
      esac
    | BINOP (s) -> case stack of
        y : x : s1 -> [evalBinOp(s, x, y) : s1, state, world]
      esac
    | LD    (x) -> [state(x) : stack, state, world]
    | ST    (x) -> case stack of
        value : s1 -> [s1, state <- [x, value], world]
      esac
    | CONST (n) -> [n : stack, state, world]
    | LABEL (_)    -> [stack, state, world]
    esac
  }

  case insns of
    {} -> c
  | insn : restInsns -> 
    case insn of
      JMP   (l)    -> (
        -- printf("JMP to label %s\n", l);
        eval(env, c, env.fromLabel(l))
      )
    | CJMP  (j, l) -> case stack of
        value : s1 -> (
          var tail;
          -- printf("CJMP to label %s\n", l);
          -- printf("value on stack %d\n", value);
          tail := case j of
            Z   -> if value == 0 then env.fromLabel(l) else restInsns fi
          | NZ  -> if value != 0 then env.fromLabel(l) else restInsns fi
          esac;
          eval(env, [s1, state, world], tail)
        )
      esac
    | _              -> eval(env, evalInsn(c, insn), restInsns)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n) -> singletonBuffer(CONST(n))
  | Var   (x) -> singletonBuffer(LD(x))
  | Binop (op, a, b) -> compileExpr(a) <+> compileExpr(b) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If      (cond, t, e) -> 
        case env.genLabel of
          [elseLab, env] -> 
            case compile(lab, env, t) of
              [_, env, tCode] -> 
                case compile(lab, env, e) of
                  [_, env, eCode] -> [
                    true,
                    env,
                    compileExpr(cond) <+
                    CJMP(Z, elseLab) <+>
                    tCode <+
                    JMP(lab) <+>
                    label(elseLab, true) <+>
                    eCode
                  ]
                esac
            esac
        esac
    | While   (cond, body) -> 
        case env.genLabels(2) of
          [condLab, bodyLab, env] ->
            case compile(condLab, env, body) of
              [condLabUsed, env, bodyCode] -> [
                false,
                env,
                singletonBuffer(JMP(condLab)) <+>
                label(bodyLab, true) <+>
                compileExpr(cond) <+>
                bodyCode <+>
                label(condLab, true) <+>
                compileExpr(cond) <+
                CJMP(NZ, bodyLab)
              ]
            esac
        esac
    | DoWhile (body, cond) -> (
        compile(
          lab,
          env,
          Seq(
            body,
            While(cond, body)
          )
        )
    )
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
