-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> case c of
      Z   -> sprintf ("CJMP Z, %s", l)
    | NZ  -> sprintf ("CJMP NZ, %s", l)
    esac 
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  fun assignArgs(state, loc, values) {
    case values of
      v : vs ->
        assign(state, Arg(loc), v);
        assignArgs(state, loc + 1, vs)
      | _    -> skip
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (env, c@[stack, call_stack, state, world], insns) {
    fun evalInsn([stack, call_stack, state, world], i) {
      -- printf("evaluating insn: %s\n", showSMInsn (i));
      -- printf("stack: %s\n", stack.string);
      case i of
        BINOP (s)   -> 
        case stack of
          y : x : s1 -> [evalOp(s, x, y) : s1, call_stack, state, world]
        esac
      | LD    (x)   -> [lookup(state, x) : stack, call_stack, state, world]
      | LDA   (x)   -> [x : stack, call_stack, state, world]
      | ST    (x)   -> 
        case stack of
          value : s1 -> (
            assign(state, x, value);
            [s1, call_stack, state, world]
          )
        esac
      | STI         ->
        case stack of
          value : x : s1 -> (
            assign(state, x, value);
            [value : s1, call_stack, state, world]
          )
        esac
      | DUP         ->
        case stack of
          value : s1 -> [value : value : s1, call_stack, state, world]
        esac
      | DROP        -> 
        case stack of
          _ : s1 -> [s1, call_stack, state, world]
        esac
      | CONST (n)   -> [n : stack, call_stack, state, world]
      | LABEL (_)   -> [stack, call_stack, state, world]
      | BEGIN (f, a, l)  ->
        case take(stack, a) of
          [stack, args] -> (
            var newState = makeState(a, l);
            assignArgs(newState, 0, args);
            [stack, call_stack, newState, world]
          )
        esac
      | GLOBAL (x)        -> (
          assign(state, Glb(x), 0);
          [stack, call_stack, state, world]
        )
      | STRING (s)       -> [s : stack, call_stack, state, world]
      | ARRAY  (n)       -> 
        case take(stack, n) of
          [_ : stack, elems] -> [listArray(elems) : stack, call_stack, state, world]
        esac
      | SEXP   (s, n)    -> 
        case take(stack, n) of
          [_ : stack, elems] -> [Sexp(s, listArray(elems)) : stack, call_stack, state, world]
        esac
      | STA              -> 
        case stack of
          value : idx : arr : s1 -> (
            arr[idx] := value;
            [value : s1, call_stack, state, world]
          )
        esac
      | ELEM             ->
        case stack of
          idx : value : s1 -> 
          case value of
            Sexp(n, arr)  -> [arr[idx] : s1, call_stack, state, world]
          | arr           -> [arr[idx] : s1, call_stack, state, world]
          esac
        esac
      | BUILTIN (f, n)   -> 
        case take(stack, n) of
          [stack, args] -> 
            case evalBuiltin(f, args, world) of
              [res, w] -> [res : stack, call_stack, state, w]
            esac
        esac
      esac
    }

    case insns of
      {} -> c
    | insn : restInsns -> 
      case insn of
        JMP   (l)         -> eval(env, c, env.fromLabel(l))
      | CJMP  (j, l)      -> case stack of
          value : s1      -> (
            var tail = case j of
              Z   -> if value == 0 then env.fromLabel(l) else restInsns fi
            | NZ  -> if value != 0 then env.fromLabel(l) else restInsns fi
            esac;
            eval(env, [s1, call_stack, state, world], tail)
          )
        esac
      | CALL   (f, n)     -> eval(env, [stack, [state, restInsns] : call_stack, state, world], env.fromLabel(f))
      | END               -> 
        case call_stack of
          [prevState, restInsns] : prev_call_stack -> eval(env, [stack, prev_call_stack, prevState, world], restInsns)
          | _ -> c
        esac
      | _                 -> eval(env, evalInsn(c, insn), restInsns)
      esac
    esac
  }
  (* End *)
  
  eval (env, [{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWithLabel(env, stmt) {
    case env.genLabel of
      [lab, env] -> 
        case compile(lab, env, stmt) of
          [labUsed, env, code] -> [env, code <+> label(lab, labUsed)]
        esac
    esac
  }

  fun compileList(env, args) {
    foldl(
      fun ([env, argsCode], arg) {
        case compileWithLabel(env, arg) of
          [env, argCode] -> [env, argsCode <+> argCode]
        esac
      },
      [env, emptyBuffer()],
      args
    )
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip                    -> [false, env, emptyBuffer ()]
    | Var     (x)             -> [false, env, singletonBuffer (LD ( lookupVal(env, x) ))]
    | Ref     (x)             -> [false, env, singletonBuffer (LDA ( lookupVar(env, x) ))]
    | Const   (n)             -> [false, env, singletonBuffer (CONST (n))]
    | Ignore  (expr)          ->
      case compileWithLabel(env, expr) of
        [env, code] -> [false, env, code <+ DROP]
      esac
    | Seq     (s1, s2)        -> 
      case compileList(env, {s1, s2}) of
        [env, code] -> [false, env, code]
      esac
    | Binop   (op, lhs, rhs)  ->
      case compileList(env, {lhs, rhs}) of
        [env, code] -> [false, env, code <+ BINOP(op)]
      esac
    | Assn    (ref, expr)     ->
      case compileList(env, {ref, expr}) of
        [env, code] -> 
          case ref of
            ElemRef(_, _) -> [false, env, code <+ STA]
          | _             -> [false, env, code <+ STI]
          esac
      esac
    | Set     (name, val_exp)  -> compile(lab, env, Assn(Ref(name), val_exp))
    | If      (cond, t, e)    -> 
      case compileWithLabel(env, cond) of
        [env, condCode] -> 
          case compileWithLabel(env, t) of
            [env, tCode] -> 
            case genLabel(env) of
              [eLab, env] ->
                case compile(lab, env, e) of
                  [_, env, eCode] -> [
                    true,
                    env,
                    condCode <+
                    CJMP(Z, eLab) <+>
                    tCode <+
                    JMP(lab) <+>
                    label(eLab, true) <+>
                    eCode
                  ]
                esac
            esac
          esac
      esac
    | While   (cond, body)    -> 
      case compileWithLabel(env, cond) of
        [env, condCode] -> 
          case compileWithLabel(env, body) of
            [env, bodyCode] -> 
              case genLabels(env, 2) of
                [condLab, bodyLab, env] -> [
                  false,
                  env,
                  emptyBuffer() <+
                  JMP(condLab) <+
                  LABEL(bodyLab) <+>
                  bodyCode <+
                  LABEL(condLab) <+>
                  condCode <+
                  CJMP(NZ, bodyLab)
                ]
              esac
          esac
      esac
    | DoWhile (body, cond)    -> compile(lab, env, Seq(body, While(cond, body)))
    | Scope   (defs, expr)    -> (
        fun collectDefs(defs) {
          foldl(
            fun ([funcs, vars], def) {
              case def of
                Var (names)     -> [funcs, vars +++ names]
              | f@Fun (_, _, _) -> [f : funcs, vars]
              esac
            },
            [{}, {}],
            defs
          )
        }

        fun addBindings(env, [funcs, vars]) {
          fun addBindingsToEnv(env, binder, bindings) {
            foldl(binder, env, bindings)
          }

          fun addVarBinding(env, name) {
            addVar(env, name)
          }

          fun addFunBinding(env, Fun(name, args, body)) {
            case genFunLabel(env, name) of
              [fLabel, env] -> (
                addFun(env, name, fLabel, size(args))
              )
            esac
          }

          var newEnv = addBindingsToEnv(
            addBindingsToEnv(
              env, 
              addVarBinding, 
              vars
            ),
            addFunBinding,
            funcs
          );

          newEnv
        }

        case beginScope(env) of
          env ->
          case collectDefs(defs) of
          [funcs, vars] -> (
            var globals = (
              if isGlobal(env) then
                listBuffer(map(fun (v) { GLOBAL(v) }, vars))
              else
                emptyBuffer()
              fi
            );
            var newEnv = foldl(
              fun(env, Fun(name, args, body)) {
                case lookupFun(env, name) of
                  Fun(label, _) -> rememberFun(env, label, args, body)
                esac
              },
              addBindings(env, [funcs, vars]),
              funcs
            );

            case compileWithLabel(newEnv, expr) of
              [env, exprCode] -> [false, endScope(env), globals <+> exprCode]
            esac
          )
          esac
        esac
      )
    | Call    (name, args)    -> (
      case lookupFun(env, name) of
        Fun (funLabel, argsNum) -> (
          case compileList(env, args) of
            [env, compiledArgs] -> (
              var callInsn = if funLabel[0] == '$' then 
                BUILTIN(name, argsNum)
              else 
                CALL(funLabel, argsNum) 
              fi;
              [
                false,
                env,
                compiledArgs <+
                callInsn
              ]
            )
          esac
        )
      esac
      )
    | String  (s)             -> [false, env, singletonBuffer(STRING(s))]
    | Array   (elems)         -> 
      case compileList(env, elems) of
        [env, compiledElems] -> [
          false,
          env,
          singletonBuffer(CONST(size(elems))) <+>
          compiledElems <+
          ARRAY(size(elems))
        ]
      esac
    | Elem    (arr_exp, loc_exp)  -> 
      case compileList(env, {arr_exp, loc_exp}) of
        [env, code] -> [
          false,
          env,
          code <+
          ELEM
        ]
      esac
    | ElemRef (arr_exp, loc_exp)  -> 
      case compileList(env, {arr_exp, loc_exp}) of
        [env, code] -> [false, env, code]
      esac
    | Sexp    (name, elems)   -> 
      case compileList(env, elems) of
        [env, compiledElems] -> [
          false,
          env,
          singletonBuffer(CONST(size(elems) + 1)) <+>
          compiledElems <+
          SEXP(name, size(elems))
        ]
      esac
    | _                       -> failure ("unknown expression: %s\n", stmt.string)
    esac
  }

  fun compileFunctions(env, buf) { 
    fun compileFunction(env, Fun (fLabel, args, body, state)) {
      var newEnv = addArgs(beginFun(env, state), args);
      case compileWithLabel(newEnv, body) of
        [env, code] -> (
          var funCode = emptyBuffer() <+
            LABEL(fLabel) <+
            BEGIN(fLabel, size(args), getLocals(env)) <+>
            code <+
            END;
          compileFunctions(env, funCode)
        )
      esac
    }

    case getFuns(env) of
      [funs, env] -> (
        foldl(
          fun ([env, code], f) {
            case compileFunction(env, f) of
              [env, fCode] -> [env, code <+> fCode]
            esac
          },
          [env, buf],
          funs
        )
      )
    esac
  }

  var compEnv = initCompEnv().beginScope
    .addFun("read"  , "$read"  , 0)
    .addFun("write" , "$write" , 1)
    .addFun("length", "$length", 1);

  case compileWithLabel(compEnv, stmt) of
    [env, code] -> getBuffer $ 
      emptyBuffer() <+
      LABEL("main") <+ 
      BEGIN("main", 0, getLocals(env)) <+> 
      code <+ 
      END <+> 
      compileFunctions(env, emptyBuffer())[1]
  esac
}
