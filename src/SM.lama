-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun evalInsn([stack, state, world], i) {
    case i of
      READ      -> (
        var readRes = readWorld(world);
        [readRes.fst : stack, state, readRes.snd]
      )
    | WRITE     -> case stack of
        value : s1 -> [s1, state, writeWorld(value, world)]
      esac
    | BINOP (s) -> case stack of
        y : x : s1 -> [evalBinOp(s, x, y) : s1, state, world]
      esac
    | LD    (x) -> [state(x) : stack, state, world]
    | ST    (x) -> case stack of
        value : s1 -> [s1, state <- [x, value], world]
      esac
    | CONST (n) -> [n : stack, state, world]
    esac
  }
  -- printf("%s", showSM(insns));
  foldl(evalInsn, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n) -> { CONST(n) }
  | Var   (x) -> { LD(x) }
  | Binop (op, a, b) -> (
      var aSm = compileExpr(a);
      var bSm = compileExpr(b);
      aSm +++ bSm +++ { BINOP(op) }
    )
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip                 -> {}
  | Seq   (stmt1, stmt2) -> (
      var stmt1Sm = compileSM(stmt1);
      var stmt2Sm = compileSM(stmt2);
      stmt1Sm +++ stmt2Sm
    )
  | Assn  (name, expr) -> (
      var exprSm = compileExpr(expr);
      exprSm +++ { ST(name) }
    )
  | Read  (name) -> (
      { READ, ST(name) }
    )
  | Write (expr) -> (
      var exprSm = compileExpr(expr);
      exprSm +++ { WRITE }
    )
  esac
}
